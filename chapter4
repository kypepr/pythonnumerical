
Chapter 4 Branching Statements


4.1 IF-ELSE STATEMENTS

When a statement is too long, we can use the “\” symbol to break a line into multiple lines

built in logical function

if a variable has a certain data type with function isinstance
any, which computes to true if any element in an array is true,
all, which computes to true only if all the elements in an array are true.


4.2 TERNARY OPERATORS

EXAMPLE: Ternary operator
In [1]: is_student = True
person = "student" if is_student else "not student"
print(person)
student


Chapter 5 : ITERATION

Given a list of integers, a, add all the elements of a.
In [4]: s = 0
a = [2, 3, 1, 3, 3]
for i in a:
  s += i # note this is equivalent to s = s + i
  print(s)

In [7]: 
for key, value in dict_a.items():
  print(key, value)

One 1
Two 2
Three 3


zip function : aggregates elements from two iterables and returns an iterator of tuples, where the ith tuple element
contains the ith element of each of the iterables.

In [8]: a = ["One", "Two", "Three"]
b = [1, 2, 3]
for i, j in zip(a, b):
print(i, j)
One 1
Two 2
Three 3


You can terminate the infinite while loop manually by pressing the interrupt the kernel – the
black square button in the tool bar above shown in Fig. 5.1, or the drop down menu - Kernel - Interrupt
in the notebook. Or if you are using the Python shell, press cmd + c on Mac or Ctrl + c on
PC.

5.3 COMPREHENSIONS


List Comprehension --> append

[Output Input_sequence Conditions]

In [2]: y = [i**2 for i in x]
print(y)

In [3]: y = [i**2 for i in x if i%2 == 0]
print(y)
[0, 4, 16]


Dictionary comprehension

In [6]: x = {"a": 1, "b": 2, "c": 3}
{key:v**3 for (key, v) in x.items()}
Out[6]: {"a": 1, "b": 8, "c": 27}



Chapter 6 : Recursion

6.1 RECURSIVE FUNCTIONS

factorial
fibonacci

di return akan memanggil function yg sama

In [3]: def fibonacci(n):
"""Computes and returns the Fibonacci of n,
a positive integer.
"""
if n == 1: # first base case
return 1
elif n == 2: # second base case
return 1
else: # Recursive step
return fibonacci(n-1) + fibonacci(n-2)
In [4]: print(fibonacci(1))
print(fibonacci(2))
print(fibonacci(3))
print(fibonacci(4))
print(fibonacci(5))
1
1
2
3
5

TRY IT! Compute the 25th Fibonacci number using iter_fib and fibonacci. Use the magic
command timeit to measure the run time for each. Note the large difference in running times.

In [9]: %timeit iter_fib(25)
7.22 μs ± 171 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
In [10]: %timeit fibonacci(25)
16.7 ms ± 910 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)

6.2 DIVIDE-AND-CONQUER




